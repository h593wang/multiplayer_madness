[gd_scene load_steps=22 format=3 uid="uid://bafrsrnmg6j3m"]

[ext_resource type="Script" path="res://client/lobby_root.gd" id="1_7jjli"]
[ext_resource type="Script" path="res://client/lobby.gd" id="1_g56nr"]
[ext_resource type="Texture2D" uid="uid://unrcyc66ungy" path="res://common/bg.png" id="2_ey5c4"]
[ext_resource type="Shader" path="res://client/glitch.gdshader" id="2_k0oqo"]
[ext_resource type="Script" path="res://client/entry_ui.gd" id="2_wailj"]
[ext_resource type="Texture2D" uid="uid://dvtyul4rttvco" path="res://common/frame1-1.png" id="3_b41dp"]
[ext_resource type="Texture2D" uid="uid://pci7un0qonye" path="res://common/grid_bar.png" id="3_ebdrt"]
[ext_resource type="FontFile" uid="uid://lhyet1gmxgiy" path="res://common/upheavtt.ttf" id="3_r8kd2"]
[ext_resource type="Texture2D" uid="uid://ddf6m4gcllee4" path="res://common/click_to_advance1.png" id="4_ww5w2"]
[ext_resource type="Texture2D" uid="uid://b3upocmiylw73" path="res://common/click_to_advance2.png" id="5_qiqyj"]
[ext_resource type="PackedScene" uid="uid://c3qbv2i4yfwjr" path="res://weapons/effects/GunFire.tscn" id="11_nu48x"]
[ext_resource type="PackedScene" path="res://enemy/EnemyDeath.tscn" id="12_btbwk"]
[ext_resource type="PackedScene" uid="uid://hhul6qb8nhsk" path="res://enemy/Enemy.tscn" id="13_y0cue"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_u6175"]
shader = ExtResource("2_k0oqo")
shader_parameter/angle = 0.0
shader_parameter/position = 0.0
shader_parameter/spread = 1.0
shader_parameter/cutoff = -1.0
shader_parameter/falloff = 1.0
shader_parameter/edge_fade = 0.15
shader_parameter/speed = 2.0
shader_parameter/ray1_density = 8.0
shader_parameter/ray2_density = 30.0
shader_parameter/ray2_intensity = 0.3
shader_parameter/color = Color(1, 0.13, 0.88, 0.1)
shader_parameter/hdr = false
shader_parameter/seed = 5.0

[sub_resource type="Shader" id="Shader_fc07t"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable's ParticleProcessMaterial.

shader_type particles;
uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float initial_linear_velocity_min;
uniform float initial_angle_min;
uniform float angular_velocity_min;
uniform float orbit_velocity_min;
uniform float linear_accel_min;
uniform float radial_accel_min;
uniform float tangent_accel_min;
uniform float damping_min;
uniform float scale_min;
uniform float hue_variation_min;
uniform float anim_speed_min;
uniform float anim_offset_min;
uniform float initial_linear_velocity_max;
uniform float initial_angle_max;
uniform float angular_velocity_max;
uniform float orbit_velocity_max;
uniform float linear_accel_max;
uniform float radial_accel_max;
uniform float tangent_accel_max;
uniform float damping_max;
uniform float scale_max;
uniform float hue_variation_max;
uniform float anim_speed_max;
uniform float anim_offset_max;
uniform float lifetime_randomness;
uniform vec4 color_value : source_color;
uniform vec3 gravity;


float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

void start() {
	uint base_number = NUMBER;
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float angle_rand = rand_from_seed(alt_seed);
	float scale_rand = rand_from_seed(alt_seed);
	float hue_rot_rand = rand_from_seed(alt_seed);
	float anim_offset_rand = rand_from_seed(alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	float tex_angle = 1.0;
	float tex_anim_offset = 1.0;
	float spread_rad = spread * degree_to_rad;
	if (RESTART_VELOCITY) {
		float tex_linear_velocity = 1.0;
		{
			float angle1_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad;
			angle1_rad += direction.x != 0.0 ? atan(direction.y, direction.x) : sign(direction.y) * (pi / 2.0);
			vec3 rot = vec3(cos(angle1_rad), sin(angle1_rad), 0.0);
			VELOCITY = rot * mix(initial_linear_velocity_min,initial_linear_velocity_max, rand_from_seed(alt_seed));
		}
	}
	float base_angle = (tex_angle) * mix(initial_angle_min, initial_angle_max, angle_rand);
	CUSTOM.x = base_angle * degree_to_rad;
	CUSTOM.y = 0.0;
	CUSTOM.w = (1.0 - lifetime_randomness * rand_from_seed(alt_seed));
	CUSTOM.z = (tex_anim_offset) * mix(anim_offset_min, anim_offset_max, anim_offset_rand);

	if (RESTART_ROT_SCALE) {
		TRANSFORM[0].xyz = vec3(1.0, 0.0, 0.0);
		TRANSFORM[1].xyz = vec3(0.0, 1.0, 0.0);
		TRANSFORM[2].xyz = vec3(0.0, 0.0, 1.0);
	}

	if (RESTART_POSITION) {
		TRANSFORM[3].xyz = vec3(0.0, 0.0, 0.0);
	if (RESTART_VELOCITY) VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
	TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
	VELOCITY.z = 0.0;
	TRANSFORM[3].z = 0.0;
	}
}

void process() {
	uint base_number = NUMBER;
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float angle_rand = rand_from_seed(alt_seed);
	float scale_rand = rand_from_seed(alt_seed);
	float hue_rot_rand = rand_from_seed(alt_seed);
	float anim_offset_rand = rand_from_seed(alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	CUSTOM.y += DELTA / LIFETIME;
	float tv = CUSTOM.y / CUSTOM.w;
	float tex_linear_velocity = 1.0;
	float tex_orbit_velocity = 1.0;
	float tex_angular_velocity = 1.0;
	float tex_linear_accel = 1.0;
	float tex_radial_accel = 1.0;
	float tex_tangent_accel = 1.0;
	float tex_damping = 1.0;
	float tex_angle = 1.0;
	float tex_anim_speed = 1.0;
	float tex_anim_offset = 1.0;
	vec3 force = gravity;
	vec3 pos = TRANSFORM[3].xyz;
	pos.z = 0.0;
	// apply linear acceleration
	force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * tex_linear_accel * mix(linear_accel_min, linear_accel_max, rand_from_seed(alt_seed)) : vec3(0.0);
	// apply radial acceleration
	vec3 org = EMISSION_TRANSFORM[3].xyz;
	vec3 diff = pos - org;
	force += length(diff) > 0.0 ? normalize(diff) * tex_radial_accel * mix(radial_accel_min, radial_accel_max, rand_from_seed(alt_seed)) : vec3(0.0);
	// apply tangential acceleration;
	float tangent_accel_val = tex_tangent_accel * mix(tangent_accel_min, tangent_accel_max, rand_from_seed(alt_seed));
	force += length(diff.yx) > 0.0 ? vec3(normalize(diff.yx * vec2(-1.0, 1.0)), 0.0) * tangent_accel_val : vec3(0.0);
	force += ATTRACTOR_FORCE;

	// apply attractor forces
	VELOCITY += force * DELTA;
	
	// orbit velocity
	float orbit_amount = tex_orbit_velocity * mix(orbit_velocity_min, orbit_velocity_max, rand_from_seed(alt_seed));
	if (orbit_amount != 0.0) {
	     float ang = orbit_amount * DELTA * pi * 2.0;
	     mat2 rot = mat2(vec2(cos(ang), -sin(ang)), vec2(sin(ang), cos(ang)));
	     TRANSFORM[3].xy -= diff.xy;
	     TRANSFORM[3].xy += rot * diff.xy;
	}
	float dmp = mix(damping_min, damping_max, rand_from_seed(alt_seed));
	if (dmp * tex_damping > 0.0) {
		float v = length(VELOCITY);
		float damp = tex_damping * dmp;
		v -= damp * DELTA;
		if (v < 0.0) {
			VELOCITY = vec3(0.0);
		} else {
			VELOCITY = normalize(VELOCITY) * v;
		}
	}
	float base_angle = (tex_angle) * mix(initial_angle_min, initial_angle_max, angle_rand);
	base_angle += CUSTOM.y * LIFETIME * (tex_angular_velocity) * mix(angular_velocity_min,angular_velocity_max, rand_from_seed(alt_seed));
	CUSTOM.x = base_angle * degree_to_rad;
	CUSTOM.z = (tex_anim_offset) * mix(anim_offset_min, anim_offset_max, rand_from_seed(alt_seed)) + tv * tex_anim_speed * mix(anim_speed_min, anim_speed_max, rand_from_seed(alt_seed));
	vec3 tex_scale = vec3(1.0);
	float tex_hue_variation = 1.0;
	float hue_rot_angle = (tex_hue_variation) * pi * 2.0 * mix(hue_variation_min, hue_variation_max, rand_from_seed(alt_seed));
	float hue_rot_c = cos(hue_rot_angle);
	float hue_rot_s = sin(hue_rot_angle);
	mat4 hue_rot_mat = mat4(vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.000, 0.000, 0.000, 1.0)) +
		mat4(vec4(0.701, -0.587, -0.114, 0.0),
			vec4(-0.299, 0.413, -0.114, 0.0),
			vec4(-0.300, -0.588, 0.886, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_c +
		mat4(vec4(0.168, 0.330, -0.497, 0.0),
			vec4(-0.328, 0.035,  0.292, 0.0),
			vec4(1.250, -1.050, -0.203, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_s;
	COLOR = hue_rot_mat * color_value;

	TRANSFORM[0] = vec4(cos(CUSTOM.x), -sin(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[1] = vec4(sin(CUSTOM.x), cos(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[2] = vec4(0.0, 0.0, 1.0, 0.0);
	TRANSFORM[3].z = 0.0;
	float base_scale = mix(scale_min, scale_max, scale_rand);
	base_scale = sign(base_scale) * max(abs(base_scale), 0.001);
	TRANSFORM[0].xyz *= base_scale * sign(tex_scale.r) * max(abs(tex_scale.r), 0.001);
	TRANSFORM[1].xyz *= base_scale * sign(tex_scale.g) * max(abs(tex_scale.g), 0.001);
	TRANSFORM[2].xyz *= base_scale * sign(tex_scale.b) * max(abs(tex_scale.b), 0.001);
	if (CUSTOM.y > CUSTOM.w) {
		ACTIVE = false;
	}
}

"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_xgk42"]
shader = SubResource("Shader_fc07t")
shader_parameter/direction = Vector3(1, 0, 0)
shader_parameter/spread = 0.0
shader_parameter/flatness = 0.0
shader_parameter/initial_linear_velocity_min = 0.0
shader_parameter/initial_angle_min = 0.0
shader_parameter/angular_velocity_min = 0.0
shader_parameter/orbit_velocity_min = 0.0
shader_parameter/linear_accel_min = 0.0
shader_parameter/radial_accel_min = 0.0
shader_parameter/tangent_accel_min = 0.0
shader_parameter/damping_min = 0.0
shader_parameter/scale_min = 1.0
shader_parameter/hue_variation_min = 0.0
shader_parameter/anim_speed_min = 0.0
shader_parameter/anim_offset_min = 0.0
shader_parameter/initial_linear_velocity_max = 0.0
shader_parameter/initial_angle_max = 0.0
shader_parameter/angular_velocity_max = 0.0
shader_parameter/orbit_velocity_max = 0.0
shader_parameter/linear_accel_max = 0.0
shader_parameter/radial_accel_max = 0.0
shader_parameter/tangent_accel_max = 0.0
shader_parameter/damping_max = 0.0
shader_parameter/scale_max = 1.0
shader_parameter/hue_variation_max = 0.0
shader_parameter/anim_speed_max = 0.0
shader_parameter/anim_offset_max = 0.0
shader_parameter/lifetime_randomness = 0.0
shader_parameter/color_value = Color(1, 1, 1, 1)
shader_parameter/gravity = Vector3(0, 10, 0)

[sub_resource type="Animation" id="Animation_j71hl"]
resource_name = "default"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:emitting")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_gxpw0"]
_data = {
"default": SubResource("Animation_j71hl")
}

[sub_resource type="LabelSettings" id="LabelSettings_wl26l"]
font_size = 128
outline_size = 16
outline_color = Color(0.34902, 0.627451, 0.388235, 1)

[sub_resource type="LabelSettings" id="LabelSettings_0e44l"]
font = ExtResource("3_r8kd2")
font_size = 60

[sub_resource type="AnimatedTexture" id="AnimatedTexture_eei7s"]
frames = 2
frame_0/texture = ExtResource("4_ww5w2")
frame_0/duration = 0.5
frame_1/texture = ExtResource("5_qiqyj")
frame_1/duration = 0.5

[node name="lobby" type="Node2D"]
z_index = 1000
script = ExtResource("1_7jjli")

[node name="lobby_bg" type="Control" parent="."]
custom_minimum_size = Vector2(1920, 1080)
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="bg" type="TextureRect" parent="lobby_bg"]
z_index = -100
layout_mode = 0
offset_right = 1920.0
offset_bottom = 1080.0
texture = ExtResource("2_ey5c4")

[node name="lightrays" type="TextureRect" parent="lobby_bg"]
z_index = -100
material = SubResource("ShaderMaterial_u6175")
layout_mode = 0
offset_right = 1920.0
offset_bottom = 1080.0
texture = ExtResource("2_ey5c4")

[node name="gridspawner" type="GPUParticles2D" parent="lobby_bg"]
position = Vector2(960, 738)
amount = 10
process_material = SubResource("ShaderMaterial_xgk42")
texture = ExtResource("3_ebdrt")
lifetime = 10.0
preprocess = 10.0

[node name="AnimationPlayer" type="AnimationPlayer" parent="lobby_bg/gridspawner"]
libraries = {
"": SubResource("AnimationLibrary_gxpw0")
}

[node name="Label" type="Label" parent="lobby_bg"]
layout_mode = 1
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -862.0
offset_top = 100.0
offset_right = -100.0
offset_bottom = 338.0
grow_horizontal = 0
text = "Everything
Survivors"
label_settings = SubResource("LabelSettings_wl26l")
horizontal_alignment = 2

[node name="lobby_ui" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_right = 956.0
offset_bottom = 525.0
scale = Vector2(2, 2)
script = ExtResource("1_g56nr")

[node name="room_list" type="ItemList" parent="lobby_ui"]
layout_mode = 0
offset_left = 84.0
offset_top = 67.0
offset_right = 499.0
offset_bottom = 363.0
max_text_lines = 5

[node name="refresh_button" type="Button" parent="lobby_ui"]
layout_mode = 0
offset_left = 84.0
offset_top = 386.0
offset_right = 312.0
offset_bottom = 423.0
text = "Refresh"

[node name="host_button" type="Button" parent="lobby_ui"]
layout_mode = 0
offset_left = 526.0
offset_top = 204.0
offset_right = 913.0
offset_bottom = 275.0
disabled = true
text = "Host
"

[node name="join_button" type="Button" parent="lobby_ui"]
layout_mode = 0
offset_left = 526.0
offset_top = 293.0
offset_right = 913.0
offset_bottom = 364.0
disabled = true
text = "Join"

[node name="host_local_button" type="Button" parent="lobby_ui"]
layout_mode = 0
offset_left = 499.0
offset_top = 439.0
offset_right = 727.0
offset_bottom = 476.0
text = "Host Local
"

[node name="join_local_button" type="Button" parent="lobby_ui"]
layout_mode = 0
offset_left = 612.0
offset_top = 491.5
offset_right = 840.0
offset_bottom = 528.5
text = "Join Local"

[node name="room_list_request" type="HTTPRequest" parent="lobby_ui"]

[node name="host_request" type="HTTPRequest" parent="lobby_ui"]

[node name="login_request" type="HTTPRequest" parent="lobby_ui"]

[node name="room_poll_request" type="HTTPRequest" parent="lobby_ui"]

[node name="entry_ui" type="Control" parent="."]
visible = false
layout_mode = 3
anchors_preset = 0
offset_right = 1920.0
offset_bottom = 1080.0
script = ExtResource("2_wailj")

[node name="background" type="ColorRect" parent="entry_ui"]
layout_mode = 0
offset_right = 1920.0
offset_bottom = 1080.0
color = Color(0.12549, 0.12549, 0.12549, 1)

[node name="cutscene_image" type="TextureRect" parent="entry_ui"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -450.0
offset_top = -540.0
offset_right = 446.0
offset_bottom = 356.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("3_b41dp")

[node name="HBoxContainer" type="HBoxContainer" parent="entry_ui"]
layout_mode = 1
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -120.0
offset_top = -120.0
offset_right = 120.0
offset_bottom = -63.0
grow_horizontal = 2
grow_vertical = 0
alignment = 1

[node name="Label" type="Label" parent="entry_ui/HBoxContainer"]
layout_mode = 2
text = "*Flick*"
label_settings = SubResource("LabelSettings_0e44l")
horizontal_alignment = 1

[node name="VSeparator" type="VSeparator" parent="entry_ui/HBoxContainer"]
custom_minimum_size = Vector2(32, 0)
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="entry_ui/HBoxContainer"]
layout_mode = 2
texture = SubResource("AnimatedTexture_eei7s")
expand_mode = 2

[node name="Camera2D" type="Camera2D" parent="."]
anchor_mode = 0

[node name="preloadshaders" type="Node" parent="."]

[node name="Node2D" parent="preloadshaders" instance=ExtResource("11_nu48x")]

[node name="EnemyDeath" parent="preloadshaders" instance=ExtResource("12_btbwk")]

[node name="Enemy" parent="preloadshaders" instance=ExtResource("13_y0cue")]
